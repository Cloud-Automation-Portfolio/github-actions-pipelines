name: deploy-to-aks

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AKS: ${{ secrets.AKS_CLUSTER_NAME }}
  NAMESPACE: lab8
  IMAGE: ghcr.io/${{ github.repository }}/lab8:sha-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aks-staging
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKS }}

      - name: Create namespace (idempotent)
        run: |
          kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"

      - name: Deploy manifests
        run: |
          kubectl apply -n "$NAMESPACE" -f k8s/deployment.yaml
          kubectl apply -n "$NAMESPACE" -f k8s/service.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deploy/lab8 -n "$NAMESPACE"

      - name: Show services and pods
        run: |
          kubectl get pods -n "$NAMESPACE" -o wide
          kubectl get svc lab8 -n "$NAMESPACE" -o wide
          IP=$(kubectl get svc lab8 -n "$NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$IP" ]; then
            echo "APP_URL=http://$IP" >> $GITHUB_OUTPUT
            echo "### AKS App URL" >> $GITHUB_STEP_SUMMARY
            echo "http://$IP" >> $GITHUB_STEP_SUMMARY
          fi
